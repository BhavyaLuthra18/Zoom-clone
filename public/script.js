// js for frontend
// seeing our own video

// this allows us to get video and audio outputfrom chrome
// get userMedia will accepts an object
// get userMedia is a promise
// so we want the access to the promise when user get access to the camera and audio

let myVideoStream;

document.addEventListener("DOMContentLoaded", () => {
  const videoGrid = document.getElementById("video-grid");
  const myVideo = document.createElement("video");
  myVideo.muted = true; // video element to be muted by default

  const socket = io("/");

  const peer = new Peer(undefined, {
    path: "/peerjs",
    host: "/",
    port: "3030",
  });

  // id is automatically generated by this peer object
  peer.on("open", (id) => {
    socket.emit("join-room", ROOM_ID, id);
  });

  const addVideoStream = (video, stream) => {
    video.srcObject = stream;
    // when we load the data for the stream we want to play this stream
    video.addEventListener("loadedmetadata", () => {
      video.play();
    });
    videoGrid.append(video);
  };

  // calling the user
  const connectToNewUser = (userId, stream) => {
    console.log(userId);
    // now calling other user who connected  with certain stream eg my stream
    const call = peer.call(userId, stream);
    const video = document.createElement("video");
    // when received user stream then add that video stream
    call.on("stream", (userVideoStream) => {
      addVideoStream(video, userVideoStream);
    });
  };

  // Mute/unmute microphone
  window.muteUnmute = () => {
    // Toggle the enabled state of the audio track in myVideoStream
    const enabled = myVideoStream.getAudioTracks()[0].enabled; // Use myVideoStream
    if (enabled) {
      myVideoStream.getAudioTracks()[0].enabled = false; // Use myVideoStream
      setUnmuteButton(); // Update the button to show unmute
    } else {
      myVideoStream.getAudioTracks()[0].enabled = true; // Use myVideoStream
      setMuteButton(); // Update the button to show mute
    }
  };

  // Set mute button UI
  const setMuteButton = () => {
    const html = `
      <i class="fa-solid fa-microphone"></i>
      <span>Mute</span>`;
    document.querySelector(".main__mute_button").innerHTML = html;
  };

  // Set unmute button UI
  const setUnmuteButton = () => {
    const html = `
      <i class=" unmute fa-solid fa-microphone-slash"></i>
      <span>Unmute</span>`;
    document.querySelector(".main__mute_button").innerHTML = html;
  };

  // play stop video
  window.playStop = () => {
    const enabled = myVideoStream.getVideoTracks()[0].enabled;
    if (enabled) {
      myVideoStream.getVideoTracks()[0].enabled = false;
      setPlayVideo();
    } else {
      myVideoStream.getVideoTracks()[0].enabled = true;
      setStopVideo();
    }
  };

  const setStopVideo = () => {
    const html = `
    <i class="fa-solid fa-video"></i>
    <span>Stop Video</span>`;
    document.querySelector(".main__video_button").innerHTML = html;
  };

  const setPlayVideo = () => {
    const html = `
    <i class=" stopVideo fa-solid fa-video-slash"></i>
    <span>Play Video</span>`;
    document.querySelector(".main__video_button").innerHTML = html;
  };

  navigator.mediaDevices
    .getUserMedia({
      video: true, // if want to access the video
      audio: true,
    })
    .then((stream) => {
      myVideoStream = stream;
      addVideoStream(myVideo, stream);

      // listen to my videoStream and then sent it to every body else
      socket.on("user-connected", (userId) => {
        connectToNewUser(userId, stream);
      });
    });

  // for input messages
  let text = $("input");

  // html = ejs
  $("html").keydown((e) => {
    // if key is enter(13) and text field have some value
    if (e.which == 13 && text.val().length !== 0) {
      // sending message from frontend along with the message that user typed
      console.log(text.val());
      socket.emit("message", text.val());
      // after user pressed enter we want to clear the input
      text.val("");
    }
  });
  // create  message
  socket.on("createMessage", (message) => {
    $("ul").append(`<li class="message"><b>user</b><br/>${message}</li>`);
    scrollToBottom();
  });

  // answer the call
  peer.on("call", (call) => {
    call.answer(myVideoStream);
    const video = document.createElement("video");
    // on call im going to answer the call and add the vdeo stream from that user
    call.on("stream", (userVideoStream) => {
      addVideoStream(video, userVideoStream);
    });
  });

  const scrollToBottom = () => {
    let div = $(".main__chat__window");
    div.scrollTop(div.prop("scrollHeight"));
  };
});
